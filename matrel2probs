% matrel must be an array of dimension Mx (M + 1). For reversals,
% simply put the transposed array.
% It also works if we insert the MxM matrix, removing the doubtful column.

function [P3,P0,P2,P]=matrel2probs(matrel)

n_fishes=size(matrel,1);

% Probability of each identification, without taking into account the rest, using
% of assuming that the probability has to be greater than 0.5, and using a
% effective number of frames less than the real one (to take a little into account
% redundancy).

factor_redundancy=3;
P0=NaN(n_fishes);
% P0_old=P0;
% P0_rev=P0;
for c1=1:n_fishes
    probk=NaN(n_fishes,10000);    
    for c2=1:n_fishes
        [moda,interv95,probk(c2,:),k]=beads2probk_bayes(matrel(c1,c2)/factor_redundancy,sum(matrel(c1,1:n_fishes))/factor_redundancy);
%         P0_old(c1,c2)=sum(probk(c2,(k>.5)))*diff(k(1:2));
%         [moda,interv95,probk,k]=beads2probk_bayes(matrel_rev(c1,c2)/factor_redundancy,sum(matrel_rev(1:end-1,c2))/factor_redundancy);
%         P0_rev(c1,c2)=sum(probk(k>.5))*diff(k(1:2));
    end 
    accumulated=cumsum(probk,2);
    accumulated=accumulated./repmat(accumulated(:,end),[1 size(accumulated,2)]);
    for c2=1:n_fishes
        P0(c1,c2)=sum(prod(accumulated([1:c2-1 c2+1:end],:),1).*probk(c2,:)/sum(probk(c2,:)));
    end
end
% This standardization should not be necessary, but it is for rounding reasons.(creo)
for c=1:n_fishes
    P0(c,:)=P0(c,:)/sum(P0(c,:));
%     P0_rev(:,c)=P0_rev(:,c)/sum(P0_rev(:,c));
end

% P3 calculation. Accounts on page 49 of the standard booklet should not be necessary, but for rounding reasons
P3=NaN(n_fishes);
for c1_fishes=1:n_fishes
    for c2_fishes=1:n_fishes
        P3(c1_fishes,c2_fishes)=P0(c1_fishes,c2_fishes)*prod(sum(P0([1:c1_fishes-1 c1_fishes+1:n_fishes],[1:c2_fishes-1 c2_fishes+1:n_fishes]),2),1);
    end
end
P3=P3./repmat(sum(P3,2),[1 n_fishes]);

if nargout>2
    disp('Guarning! Puede que esté usando una versión obsoleta de matrel2probs')
    % I avoid values ​​too close to 1 screw up
    unomenosP0=1-P0;
    % unomenosP0_rev=1-P0_rev;
    for c_fishes=1:n_fishes
        ind=unomenosP0(c_fishes,:)==0;
        if sum(ind)==1
            unomenosP0(c_fishes,ind)=sum(P0(c_fishes,~ind));
        end
        %     ind=unomenosP0_rev(:,c_fishes)==0;
        %     if sum(ind)==1
        %         unomenosP0_rev(ind,c_fishes)=sum(P0_rev(~ind,c_fishes));
        %     end
    end % c_fishes
    % Probability of each identification, taking into account those of the same
    % fila
    P=NaN(n_fishes);
    % P_rev=P;
    for c1=1:n_fishes
        for c2=1:n_fishes
            P(c1,c2)=P0(c1,c2)*prod(unomenosP0(c1,[1:c2-1 c2+1:end]));
            %         P_rev(c1,c2)=P0_rev(c1,c2)*prod(unomenosP0_rev([1:c1-1 c1+1:end],c2));
        end
    end
    for c=1:n_fishes
        P(c,:)=P(c,:)/sum(P(c,:));
        %     P_rev(:,c)=P_rev(:,c)/sum(P_rev(:,c));
    end
    
    
    % Probability of each identification, taking into account the rest
    P2=NaN(n_fishes);
    % P2_rev=P2;
    for c1=1:n_fishes
        for c2=1:n_fishes
            P2(c1,c2)=sum(log(sum(P([1:c1-1 c1+1:n_fishes],[1:c2-1 c2+1:n_fishes]),2)))+log(P(c1,c2));
            %         P2_rev(c1,c2)=sum(log(sum(P_rev([1:c1-1 c1+1:n_fishes],[1:c2-1 c2+1:n_fishes]),1)))+log(P_rev(c1,c2));
        end
    end
    P2=P2-max(P2(:));
    % P2_rev=P2_rev-max(P2_rev(:));
    P2=exp(P2);
    % P2_rev=exp(P2_rev);
    for c=1:n_fishes
        P2(c,:)=P2(c,:)/sum(P2(c,:));
        %    P2_rev(:,c)=P2_rev(:,c)/sum(P2_rev(:,c));
    end
end
